@page "/adminclass"
@page "/adminclass/{Id}"
 
@using BlazorApp.Client.Services.ClassesService


@inject HttpClient Http
@inject IClassesService ClassService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>AdminClass</h3>

@if (Id is null)
{
    <PageTitle>Create a new Course</PageTitle>
    <h3>Create a new Class</h3>
}
else
{
     <PageTitle>Edit @cl.Name </PageTitle>
    <h3>Edit @cl.Name  </h3>
}

<EditForm Model="cl" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" Context="CurrentEditContext">

    <h3>@FormSubmitMessage</h3>
    <DataAnnotationsValidator />
    <ValidationSummary />
  
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="cl.Name" class="form-control" />
        <ValidationMessage For="@(() => cl.Name)" />
    </div>

   
    <div>
        <label for="Location">Location</label>
        @* <InputText id="Location" @bind-Value="cl.Location" class="form-control" /> *@
        <InputSelect @bind-Value="cl.Location" class="form-control">
            <option value="">Select Location ...</option>
            <option value="Pythouse (Tennis) Clubhouse, Hatch">Pythouse (Tennis) Clubhouse, Hatch</option>
            <option value="Nadder Centre, Tisbury">Nadder Centre, Tisbury</option>
        </InputSelect>
        <ValidationMessage For="@(() => cl.Location)" />
    </div>
    <div>
        <label for="Date">Date</label>
        <InputDate id="Date" @bind-Value="cl.Date" class="form-control" />
        <ValidationMessage For="@(() => cl.Date)" />
    </div>
    <div>
        <label for="StartTime">Start Time</label>
        <InputDate Type="InputDateType.Time" id="StartTime" @bind-Value="cl.StartTime" class="form-control" />
        <ValidationMessage For="@(() => cl.StartTime)" />
    </div>
    <div>
        <label for="EndTime">End Time</label>
        <InputDate Type="InputDateType.Time" id="EndTime" @bind-Value="cl.EndTime" class="form-control" />
        <ValidationMessage For="@(() => cl.EndTime)" />
    </div>
    <div>
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="cl.Price" class="form-control" />
        <ValidationMessage For="@(() => cl.Price)" />
    </div>

    <div>
        <label for="DisplayOnLandingPage">Display On Landing Page</label>
        <InputCheckbox id="DisplayOnLandingPage" @bind-Value="cl.DisplayOnLandingPage" class="" />
        <ValidationMessage For="@(() => cl.DisplayOnLandingPage)" />
    </div>

    <div>
        <label for="WeeklyRecurring">Weekly Recurring</label>
        <InputCheckbox id="WeeklyRecurring" @bind-Value="cl.WeeklyRecurring" class="" />
        <ValidationMessage For="@(() => cl.WeeklyRecurring)" />
    </div>

    <div>
        <label for="Active">Active</label>
        <InputCheckbox id="Active" @bind-Value="cl.Active" class="" />
        <ValidationMessage For="@(() => cl.Active)" />
    </div>
    
    <div class="form-group">
        <label for="SpecialNotes">Special Notes</label>
        <InputText id="SpecialNotes" @bind-Value="cl.SpecialNotes" class="form-control" />
        <ValidationMessage For="@(() => cl.SpecialNotes)" />
    </div>


    <button type="submit" class="btn btn-primary">@_btnText</button>



</EditForm>


@code {

    [Parameter]
    public string? Id { get; set; }

    private SharedModels.Class cl = new SharedModels.Class();
    private string _btnText = string.Empty;
    private bool InvalidSubmit;
    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";
    private bool _displayDeleteButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _btnText = Id == null ? "Save New Class" : "Update Class";
        //await ClassService.GetClasses();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            _displayDeleteButton = true;
            var result = await ClassService.GetClassById(Id);
            if (result is not null)
            {
                cl = result;
            }
            else
                NavigationManager.NavigateTo("/adminclass");
        }
        else
        {
        }


    }

    async Task HandleSubmit()
    {
        try
        {
            InvalidSubmit = false;

            if (Id is null)
            {
                await ClassService.CreateClass(cl);
                NavigationManager.NavigateTo("/adminclasses");
            }
            else
            {
                await ClassService.UpdateClass(cl);
                NavigationManager.NavigateTo("/adminclasses");
            }
        }
        catch (Exception ex)
        {
            FormSubmitMessage = "Error Updating / Creating Class";
        }
    }

    public void HandleInvalidSubmit()
    {
        FormSubmitMessage = "Invalid Submit Not Implemented";
    }
}

